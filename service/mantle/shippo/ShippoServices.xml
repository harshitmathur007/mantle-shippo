<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.0.xsd">
    <service verb="get" noun="ShippingRate">
        <implements service="mantle.shipment.CarrierServices.get#ShippingRate"/>
        <actions>
            <!-- TODO FUTURE: get rate from Shippo and save ID, change request#ShippingLabels to do transaction based on rate if set -->
        </actions>
    </service>
    <service verb="request" noun="ShippingLabels">
        <implements service="mantle.shipment.CarrierServices.request#ShippingLabels"/>
        <actions>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one>
            <set field="apiToken" from="apiTokenOpt?.optionValue"/>
            <if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not validating address"/><return/></if>

            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="labelTypeOpt">
                <field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoLabelType"/></entity-find-one>
            <set field="label_file_type" from="labelTypeOpt?.optionValue ?: 'PDF'"/>

            <!-- NOTE: lock on Shipment record -->
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment" for-update="true"/>
            <if condition="shipment == null"><return error="true" message="Shipment not found with ID ${shipmentId}"/></if>
            <entity-find-one entity-name="mantle.shipment.ShipmentRouteSegment" value-field="routeSegment"/>
            <if condition="routeSegment == null"><return error="true" message="Shipment Route Segment not found with ID ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <set field="fromPartyId" from="shipment.fromPartyId"/>
            <if condition="!fromPartyId"><message error="true">From party not set on shipment ${shipmentId}</message></if>
            <set field="toPartyId" from="shipment.toPartyId"/>
            <if condition="!toPartyId"><message error="true">To party not set on shipment ${shipmentId}</message></if>

            <set field="carrierPartyId" from="routeSegment.carrierPartyId"/>
            <if condition="!carrierPartyId || carrierPartyId == '_NA_'"><message error="true">Carrier not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}</message></if>
            <set field="shipmentMethodEnumId" from="routeSegment.shipmentMethodEnumId"/>
            <if condition="!shipmentMethodEnumId"><message error="true">Shipment method not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}</message></if>

            <check-errors/>

            <!-- address_from -->
            <set field="originPostalContactMechId" from="routeSegment.originPostalContactMechId"/>
            <if condition="!originPostalContactMechId &amp;&amp; routeSegment.originFacilityId">
                <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipOrigin" out-map="facOriginOut"
                        in-map="[facilityId:routeSegment.originFacilityId]"/>
                <if condition="facOriginOut.postalContactMechId">
                    <set field="originPostalContactMechId" from="facOriginOut.postalContactMechId"/>
                    <set field="routeSegment.originPostalContactMechId" from="originPostalContactMechId"/>
                    <entity-update value-field="routeSegment"/>
                </if>
            </if>
            <if condition="originPostalContactMechId"><then>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                    <field-map field-name="contactMechId" from="originPostalContactMechId"/></entity-find-one>
                <if condition="originPostalAddress.shipGatewayAddressId"><then>
                    <set field="address_from" from="originPostalAddress.shipGatewayAddressId"/>
                </then><else>
                    <!-- TODO: don't blow up if address not associated with party, and don't update PartyContactMech -->
                    <service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="toValidateOut"
                            in-map="[contactMechId:originPostalContactMechId, partyId:fromPartyId, facilityId:routeSegment.originFacilityId,
                                shippingGatewayConfigId:shippingGatewayConfigId]"/>
                    <set field="originPostalContactMechId" from="toValidateOut.contactMechId"/>
                    <set field="routeSegment.originPostalContactMechId" from="originPostalContactMechId"/>
                    <entity-update value-field="routeSegment"/>

                    <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                        <field-map field-name="contactMechId" from="originPostalContactMechId"/></entity-find-one>
                    <set field="address_from" from="originPostalAddress?.shipGatewayAddressId"/>
                    <if condition="!address_from"><message error="true">Tried to validate and save origin address but got no ID back from Shippo</message></if>
                </else></if>
            </then><else>
                <message error="true">No destination address set on Shipment Route Segment ${shipmentId}:${shipmentRouteSegmentSeqId}</message>
            </else></if>

            <!-- address_to -->
            <set field="destPostalContactMechId" from="routeSegment.destPostalContactMechId"/>
            <if condition="destPostalContactMechId"><then>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                    <field-map field-name="contactMechId" from="destPostalContactMechId"/></entity-find-one>
                <if condition="destPostalAddress.shipGatewayAddressId"><then>
                    <set field="address_to" from="destPostalAddress.shipGatewayAddressId"/>
                </then><else>
                    <service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="toValidateOut"
                            in-map="[contactMechId:destPostalContactMechId, partyId:toPartyId, shippingGatewayConfigId:shippingGatewayConfigId]"/>
                    <set field="destPostalContactMechId" from="toValidateOut.contactMechId"/>
                    <set field="routeSegment.destPostalContactMechId" from="destPostalContactMechId"/>
                    <entity-update value-field="routeSegment"/>

                    <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                        <field-map field-name="contactMechId" from="destPostalContactMechId"/></entity-find-one>
                    <set field="address_to" from="destPostalAddress?.shipGatewayAddressId"/>
                    <if condition="!address_to"><message error="true">Tried to validate and save destination address but got no ID back from Shippo</message></if>
                </else></if>
            </then><else>
                <message error="true">No destination address set on Shipment Route Segment ${shipmentId}:${shipmentRouteSegmentSeqId}</message>
            </else></if>

            <!-- carrier_account, servicelevel_token -->
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayCarrier" value-field="gatewayCarrier"/>
            <set field="carrier_account" from="gatewayCarrier?.gatewayAccountId"/>
            <if condition="!carrier_account"><message error="true">No Shippo account ID found for carrier ${carrierPartyId} in gateway ${shippingGatewayConfigId}</message></if>
            <entity-find-one entity-name="mantle.shipment.carrier.CarrierShipmentMethod" value-field="carrierShipmentMethod"/>
            <set field="servicelevel_token" from="carrierShipmentMethod?.gatewayServiceCode"/>
            <if condition="!servicelevel_token"><message error="true">No Shippo service level code found for carrier ${carrierPartyId} method ${shipmentMethodEnumId}</message></if>

            <!-- check errors one last time before looping through packages -->
            <check-errors/>

            <!-- the rest is per package -->
            <entity-find entity-name="mantle.shipment.ShipmentPackageRouteSeg" list="packageRouteSegList">
                <econdition field-name="shipmentId"/><econdition field-name="shipmentRouteSegmentSeqId"/>
                <econdition field-name="shipmentPackageSeqId" ignore-if-empty="true"/>
            </entity-find>
            <iterate list="packageRouteSegList" entry="packageRouteSeg">
                <set field="shipmentPackageSeqId" from="packageRouteSeg.shipmentPackageSeqId"/>
                <if condition="packageRouteSeg.gatewayShipmentId">
                    <message>Package ${shipmentPackageSeqId} in route segment ${shipmentRouteSegmentSeqId} already has Shippo transaction ${packageRouteSeg.gatewayShipmentId}, skipping; void label to create a new one</message>
                    <continue/>
                </if>
                <entity-find-one entity-name="mantle.shipment.ShipmentPackage" value-field="shipmentPackage"/>

                <!-- parcel -->
                <!-- length units supported: "cm", "in", "ft", "mm", "m", "yd" -->
                <!-- weight units supported: "g", "oz", "lb", "kg" -->
                <set field="boxType" from="shipmentPackage.boxType"/>
                <if condition="boxType == null"><message>Package ${shipmentPackageSeqId} has no box type, skipping</message><continue/></if>
                <if condition="boxType.gatewayBoxId"><then>
                    <set field="parcel" from="boxType.gatewayBoxId"/><!-- for pre-configured flat rate boxes -->
                </then><else>
                    <set field="dimUom" from="boxType.dimensionUom"/>
                    <if condition="!boxType.boxLength || !boxType.boxWidth || !boxType.boxHeight || dimUom == null">
                        <message>Box type ${boxType.shipmentBoxTypeId} is missing dimensions (length, width, height) or dimension UOM, skipping</message><continue/></if>
                    <set field="weightUom" from="shipmentPackage.weightUom ?: boxType.weightUom"/>
                    <set field="weight" from="shipmentPackage.weight ?: boxType.defaultGrossWeight"/>
                    <if condition="!weight || weightUom == null">
                        <message>Package ${shipmentPackageSeqId} box type ${boxType.shipmentBoxTypeId} is missing weight or weight UOM, skipping</message><continue/></if>

                    <set field="parcel" from="[length:boxType.boxLength, width:boxType.boxWidth, height:boxType.boxHeight,
                            distance_unit:dimUom.abbreviation, weight:weight, mass_unit:weightUom.abbreviation]"/>
                </else></if>

                <set field="requestMap" from="[shipment:[object_purpose:'PURCHASE', address_from:address_from, address_to:address_to,
                    parcel:parcel], carrier_account:carrier_account, servicelevel_token:servicelevel_token, async:false]"/>

                <log level="warn" message="Shippo transaction shipment ${shipmentId} request:\n${requestMap}"/>

                <script><![CDATA[
                    import org.moqui.util.RestClient
                    RestClient restClient = ec.service.rest().method(RestClient.POST).addHeader("Authorization", "ShippoToken ${apiToken}")
                            .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                    restClient.uri().protocol("https").host("api.goshippo.com").port(443).path("transactions").build()
                    RestClient.RestResponse restResponse = restClient.call()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        // based on code in Shippo Java client will return error message in plain text body
                        String errMsg = restResponse.text()
                        ec.logger.error("Shippo error response (${restResponse.statusCode}): ${errMsg}")
                        ec.message.addError(errMsg)
                        return
                    }
                    responseMap = restResponse.jsonObject()
                ]]></script>

                <log level="warn" message="Shippo transaction shipment ${shipmentId} response: ${responseMap}"/>

                <!-- TODO save results -->

            </iterate>
        </actions>
    </service>
    <!--
{
    "object_state": "VALID",
    "object_status": "SUCCESS",
    "object_created": "2013-12-27T19:14:48.273Z",
    "object_updated": "2013-12-27T19:14:48.273Z",
    "object_id": "64bba01845ef40d29374032599f22588",
    "object_owner": "shippotle@goshippo.com",
    "was_test": false,
    "rate": "cf6fea899f1848b494d9568e8266e076",
    "tracking_number": "ZW70QJC",
    "tracking_status": {
        "object_created": "2013-12-27T23:17:41.411Z",
        "object_id": "a21b3d6831c14ceaba6730179ce6e784",
        "status": "UNKNOWN",
        "status_details": "",
        "status_date": "2013-12-28T12:04:04.214Z"
    },
    "tracking_history": [],
    "tracking_url_provider": "https://tools.usps.com/go/TrackConfirmAction.action?tLabels=ZW70QJC",
    "label_url": "https://shippo-delivery.s3.amazonaws.com/96.pdf?Signature=PEdWrp0mFWAGwJp7FW3b%2FeA2eyY%3D&Expires=1385930652&AWSAccessKeyId=AKIAJTHP3LLFMYAWALIA",
    "commercial_invoice_url": "",
    "metadata": "",
    "messages": []
}    -->

    <service verb="void" noun="ShippingLabels">
        <implements service="mantle.shipment.CarrierServices.void#ShippingLabels"/>
        <actions>
            <!-- TODO -->
        </actions>
    </service>
    <service verb="track" noun="ShippingLabels">
        <implements service="mantle.shipment.CarrierServices.track#ShippingLabels"/>
        <actions>
            <!-- TODO -->
        </actions>
    </service>

    <service verb="validate" noun="PostalAddress">
        <implements service="mantle.shipment.CarrierServices.validate#ShippingPostalAddress"/>
        <actions>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one>
            <set field="apiToken" from="apiTokenOpt?.optionValue"/>
            <if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not validating address"/><return/></if>

            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress"/>
            <if condition="postalAddress == null"><return/></if>

            <service-call name="mantle.shippo.ShippoServices.get#AddressMap" out-map="addrOut"
                    in-map="[postalAddress:postalAddress, partyId:partyId]"/>
            <set field="addressMap" from="addrOut.addressMap"/>

            <set field="addressMap.validate" from="true"/>
            <set field="addressMap.async" from="false"/>

            <!-- <log level="warn" message="Shippo validate address ${contactMechId} request:\n${addressMap}"/> -->

            <script><![CDATA[
                import org.moqui.util.RestClient
                RestClient restClient = ec.service.rest().method(RestClient.POST).addHeader("Authorization", "ShippoToken ${apiToken}")
                        .addHeader("Content-Type", "application/json").jsonObject(addressMap)
                restClient.uri().protocol("https").host("api.goshippo.com").port(443).path("addresses").build()
                RestClient.RestResponse restResponse = restClient.call()
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                    // based on code in Shippo Java client will return error message in plain text body
                    String errMsg = restResponse.text()
                    ec.logger.error("Shippo error response (${restResponse.statusCode}): ${errMsg}")
                    ec.message.addError(errMsg)
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script>

            <!-- <log level="warn" message="Shippo validate address ${contactMechId} response: ${responseMap}"/> -->

            <!-- call update#PartyPostalAddress for cleansed address -->
            <if condition="'VALIDATOR'.equals(responseMap.object_source) &amp;&amp; (partyId || facilityId)">
                <set field="stateProvinceGeoId" from="postalAddress.stateProvinceGeoId"/>
                <if condition="postalAddress.countryGeoId &amp;&amp; responseMap.state">
                    <entity-find entity-name="moqui.basic.GeoAssocAndToDetail" list="stateGeoList">
                        <econdition field-name="geoId" from="postalAddress.countryGeoId"/>
                        <econdition field-name="geoCodeAlpha2" from="responseMap.state"/>
                    </entity-find>
                    <if condition="stateGeoList"><set field="stateProvinceGeoId" from="stateGeoList[0].toGeoId"/></if>
                </if>
                <set field="paInMap" from="[contactMechId:contactMechId,
                        toName:(responseMap.company ? responseMap.company : responseMap.name), attnName:(responseMap.company ? responseMap.name : null),
                        address1:((responseMap.street_no ? responseMap.street_no + ' ' : '') + responseMap.street1),
                        address2:responseMap.street2, unitNumber:null, city:responseMap.city, stateProvinceGeoId:stateProvinceGeoId,
                        postalCode:(responseMap.zip.contains('-') ? responseMap.zip.substring(0, responseMap.zip.indexOf('-')) : responseMap.zip),
                        postalCodeExt:(responseMap.zip.contains('-') ? responseMap.zip.substring(responseMap.zip.indexOf('-') + 1) : ''),
                        commercial:(responseMap.is_residential != null &amp;&amp; !responseMap.is_residential ? 'Y' : 'N')]"/>
                <if condition="partyId">
                    <service-call name="mantle.party.ContactServices.update#PartyPostalAddress" out-map="paOut"
                        in-map="paInMap + [partyId:partyId]"/>
                    <set field="contactMechId" from="paOut.contactMechId"/>
                    <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress"/>
                </if>
                <if condition="facilityId">
                    <service-call name="mantle.facility.ContactServices.update#FacilityPostalAddress" out-map="paOut"
                            in-map="paInMap + [facilityId:facilityId]"/>
                    <set field="contactMechId" from="paOut.contactMechId"/>
                    <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress"/>
                </if>
            </if>

            <!-- update contactMech -->
            <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="contactMech"/>
            <set field="stateMap" from="[VALID:'CmtlValid', INVALID:'CmtlInvalid', INCOMPLETE:'CmtlIncomplete']"/>
            <set field="contactMech.trustLevelEnumId" from="stateMap.get(responseMap.object_state)"/>
            <if condition="responseMap.messages">
                <set field="validateMessage" value=""/>
                <iterate list="responseMap.messages" entry="messageObj">
                    <!-- <log level="info" message="Shippo validate address ${contactMechId} message: ${messageObj}"/> -->
                    <set field="validateMessage" value="${validateMessage}(${messageObj.source}:${messageObj.code}) ${messageObj.text} "/>
                </iterate>
                <if condition="validateMessage.length() &gt; 255"><set field="validateMessage" from="validateMessage.substring(0,255)"/></if>
                <set field="contactMech.validateMessage" from="validateMessage"/>
            </if>
            <entity-update value-field="contactMech"/>

            <!-- update postalAddress -->
            <set field="postalAddress.shipGatewayAddressId" from="responseMap.object_id"/>
            <entity-update value-field="postalAddress"/>
        </actions>
    </service>

    <service verb="get" noun="AddressMap">
        <in-parameters>
            <parameter name="postalAddress" type="EntityValue" required="true"/>
            <parameter name="partyId"/>
            <parameter name="isOrigin" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters><parameter name="addressMap" type="Map"/></out-parameters>
        <actions>
            <set field="contactMechId" from="postalAddress.contactMechId"/>
            <if condition="!partyId">
                <!-- try to find from related Party -->
                <entity-find entity-name="mantle.party.contact.PartyContactMech" list="pcmList">
                    <econdition field-name="contactMechId"/><select-field field-name="partyId"/></entity-find>
                <set field="partyIds" from="new HashSet(pcmList*.partyId)"/>
                <!-- only if there is only one Party associated with the address -->
                <if condition="partyIds.size() == 1"><set field="partyId" from="pcmList[0].partyId"/></if>
            </if>

            <!-- name/company fields -->
            <if condition="postalAddress.attnName"><then>
                <set field="name" from="postalAddress.attnName"/>
                <set field="company" from="postalAddress.toName"/>
            </then><else>
                <set field="name" from="postalAddress.toName"/>
                <set field="company" from="null"/>
            </else></if>
            <if condition="!name &amp;&amp; partyId">
                <entity-find-one entity-name="mantle.party.PartyDetail" value-field="partyDetail"><field-map field-name="partyId"/></entity-find-one>
                <if condition="partyDetail != null">
                    <set field="name" value="${partyDetail.firstName ? partyDetail.firstName + ' ' : ''}${partyDetail.lastName?:''}${partyDetail.organizationName?:''}"/></if>
            </if>
            <if condition="!name"><return error="true" message="No name found for address ${contactMechId}"/></if>

            <!-- address fields -->
            <set field="street1" from="postalAddress.address1"/>
            <if condition="postalAddress.unitNumber"><set field="street1" from="street1 + ' #' + (String) postalAddress.unitNumber"/></if>
            <set field="stateProvinceGeo" from="postalAddress.stateProvinceGeo"/>
            <set field="countryGeo" from="postalAddress.countryGeo"/>

            <!-- phone number -->
            <if condition="postalAddress.telecomContactMechId">
                <entity-find-one entity-name="mantle.party.contact.TelecomNumber" value-field="telecomNumber">
                    <field-map field-name="contactMechId" from="postalAddress.telecomContactMechId"/></entity-find-one>
            </if>
            <if condition="telecomNumber == null &amp;&amp; partyId">
                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="telecomInfo"
                        in-map="[partyId:partyId, telecomContactMechPurposeId:(isOrigin ? 'PhoneShippingOrigin' : 'PhoneShippingDest')]"/>
                <if condition="telecomInfo.telecomNumber != null">
                    <set field="telecomNumber" from="telecomInfo.telecomNumber"/>
                    <set field="postalAddress.telecomContactMechId" from="telecomNumber.contactMechId"/>
                    <entity-update value-field="postalAddress"/>
                </if>
            </if>
            <if condition="telecomNumber != null">
                <set field="phone" value="${telecomNumber.countryCode? telecomNumber.countryCode + '-' :''}${telecomNumber.areaCode? telecomNumber.areaCode + '-' :''}${telecomNumber.contactNumber?:''}"/></if>

            <!-- email address -->
            <if condition="postalAddress.emailContactMechId">
                <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="emailCm">
                    <field-map field-name="contactMechId" from="postalAddress.emailContactMechId"/></entity-find-one>
                <set field="email" from="emailCm?.infoString"/>
            </if>
            <if condition="!email &amp;&amp; partyId">
                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="emailInfo"
                        in-map="[partyId:partyId, emailContactMechPurposeId:(isOrigin ? 'EmailShippingOrigin' : 'EmailShippingDest')]"/>
                <if condition="emailInfo.emailAddress">
                    <set field="email" from="emailInfo.emailAddress"/>
                    <set field="postalAddress.emailContactMechId" from="emailInfo.emailContactMechId"/>
                    <entity-update value-field="postalAddress"/>
                </if>
            </if>

            <!-- make the Map -->
            <set field="addressMap" from="[object_purpose:'PURCHASE', name:name, company:company,
                street1:street1, street2:postalAddress.address2, city:postalAddress.city,
                state:stateProvinceGeo?.geoCodeAlpha2, country:countryGeo?.geoCodeAlpha2, zip:postalAddress.postalCode,
                phone:phone, email:email]"/>
        </actions>
    </service>
</services>
