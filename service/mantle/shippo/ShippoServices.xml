<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <!-- ========== Rate (Estimate) Services ========== -->

    <service verb="get" noun="OrderShippingRate">
        <implements service="mantle.shipment.CarrierServices.get#OrderShippingRate"/>
        <actions>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one>
            <set field="apiToken" from="apiTokenOpt?.optionValue"/>
            <if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not getting rates"/><return/></if>

            <if condition="!packageInfoList"><return message="No package info found, not getting Shippo shipping rates"/></if>

            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart"/>

            <set field="fromPartyId" from="orderPart.vendorPartyId"/>
            <if condition="!fromPartyId"><return message="Vendor party not set on order part ${orderId}:${orderPartSeqId}"/></if>
            <set field="toPartyId" from="orderPart.customerPartyId"/>
            <if condition="!toPartyId"><return message="To party not set on order part ${orderId}:${orderPartSeqId}"/></if>

            <set field="carrierPartyId" from="carrierPartyId ?: orderPart.carrierPartyId"/>
            <if condition="!carrierPartyId || carrierPartyId == '_NA_'"><return message="Carrier not set on order part ${orderId}:${orderPartSeqId}"/></if>
            <set field="shipmentMethodEnumId" from="shipmentMethodEnumId ?: orderPart.shipmentMethodEnumId"/>
            <if condition="!shipmentMethodEnumId"><return message="Shipment method not set on order part ${orderId}:${orderPartSeqId}"/></if>

            <!-- address_from -->
            <if condition="!orderPart.facilityId"><return message="Facility not set on order part ${orderId}:${orderPartSeqId}"/></if>
            <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipOrigin" out-map="facOriginOut"
                    in-map="[facilityId:orderPart.facilityId]"/>
            <if condition="!facOriginOut.postalContactMechId"><return message="Facility ${orderPart.facilityId} on order part ${orderId}:${orderPartSeqId} has no ship origin address"/></if>
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                <field-map field-name="contactMechId" from="facOriginOut.postalContactMechId"/></entity-find-one>
            <if condition="originPostalAddress.shipGatewayAddressId"><then>
                <set field="address_from" from="originPostalAddress.shipGatewayAddressId"/>
            </then><else>
                <service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="fromValidateOut"
                        in-map="[contactMechId:facOriginOut.postalContactMechId, partyId:fromPartyId, facilityId:orderPart.facilityId,
                            shippingGatewayConfigId:shippingGatewayConfigId]"/>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                    <field-map field-name="contactMechId" from="fromValidateOut.contactMechId"/></entity-find-one>
                <set field="address_from" from="originPostalAddress?.shipGatewayAddressId"/>
                <if condition="!address_from"><return message="Tried to validate and save origin address but got no ID back from Shippo"/></if>
            </else></if>

            <!-- address_to -->
            <if condition="!orderPart.postalContactMechId"><return message="Address not set on order part ${orderId}:${orderPartSeqId}"/></if>
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                <field-map field-name="contactMechId" from="orderPart.postalContactMechId"/></entity-find-one>
            <if condition="destPostalAddress.shipGatewayAddressId"><then>
                <set field="address_to" from="destPostalAddress.shipGatewayAddressId"/>
            </then><else>
                <service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="toValidateOut"
                        in-map="[contactMechId:orderPart.postalContactMechId, partyId:toPartyId, shippingGatewayConfigId:shippingGatewayConfigId]"/>
                <set field="postalContactMechId" from="toValidateOut.contactMechId"/>
                <set field="orderPart.postalContactMechId" from="postalContactMechId"/>
                <entity-update value-field="orderPart"/>

                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                    <field-map field-name="contactMechId" from="orderPart.postalContactMechId"/></entity-find-one>
                <set field="address_to" from="destPostalAddress?.shipGatewayAddressId"/>
                <if condition="!address_to"><return message="Tried to validate and save destination address but got no ID back from Shippo"/></if>
            </else></if>

            <!-- carrier_account, servicelevel_token -->
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayCarrier" value-field="gatewayCarrier"/>
            <set field="carrier_account" from="gatewayCarrier?.gatewayAccountId"/>
            <if condition="!carrier_account"><return message="No Shippo account ID found for carrier ${carrierPartyId} in gateway ${shippingGatewayConfigId}"/></if>
            <entity-find-one entity-name="mantle.shipment.carrier.CarrierShipmentMethod" value-field="carrierShipmentMethod"/>
            <set field="servicelevel_token" from="carrierShipmentMethod?.gatewayServiceCode"/>
            <if condition="!servicelevel_token"><return message="No Shippo service level code found for carrier ${carrierPartyId} method ${shipmentMethodEnumId}"/></if>

            <!-- parcels -->
            <set field="parcels" from="[]"/>
            <iterate list="packageInfoList" entry="packageInfo">
                <!-- parcel -->
                <entity-find-one entity-name="mantle.shipment.ShipmentBoxType" value-field="boxType">
                    <field-map field-name="shipmentBoxTypeId" from="packageInfo.shipmentBoxTypeId"/></entity-find-one>
                <if condition="boxType == null"><message>Package has no box type, skipping</message><continue/></if>

                <set field="dimUom" from="boxType.dimensionUom"/>
                <if condition="!boxType.boxLength || !boxType.boxWidth || !boxType.boxHeight || dimUom == null">
                    <message>Box type ${boxType.shipmentBoxTypeId} is missing dimensions (length, width, height) or dimension UOM, skipping package</message><continue/></if>
                <entity-find-one entity-name="moqui.basic.Uom" value-field="weightUom">
                    <field-map field-name="uomId" from="packageInfo.weightUomId ?: 'WT_lb'"/></entity-find-one>
                <set field="weight" from="packageInfo.weight ?: boxType.defaultGrossWeight"/>
                <if condition="!weight || weightUom == null">
                    <message>Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} is missing weight or weight UOM, skipping package</message><continue/></if>

                <set field="distance_unit" from="dimUom.abbreviation"/>
                <if condition="!(distance_unit in ['cm', 'in', 'ft', 'mm', 'm', 'yd'])">
                    <message>Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} dimension unit is '${distance_unit}', must be one of: 'cm', 'in', 'ft', 'mm', 'm', 'yd'; skipping package</message><continue/></if>
                <set field="mass_unit" from="weightUom.abbreviation"/>
                <if condition="!(mass_unit in ['g', 'oz', 'lb', 'kg'])">
                    <message>Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} weight unit is '${mass_unit}', must be one of: 'g', 'oz', 'lb', 'kg'; skipping package</message><continue/></if>

                <set field="parcel" from="[length:boxType.boxLength, width:boxType.boxWidth, height:boxType.boxHeight,
                            distance_unit:distance_unit, weight:weight, mass_unit:mass_unit, template:boxType.gatewayBoxId]"/>
                <script>parcels.add(parcel)</script>
            </iterate>
            <if condition="!parcels"><return/></if>

            <!-- assemble the full request Map -->
            <set field="requestMap" from="[address_from:address_from, address_to:address_to,
                    parcels:parcels, carrier_accounts:[carrier_account], async:false]"/>
            <!-- NOTE: any way to pass servicelevel_token(s) to limit in advance? for now just filtering after -->

            <!-- <log level="warn" message="Shippo rate order ${orderId} request:\n${requestMap}"/> -->

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .addHeader("Authorization", "ShippoToken ${apiToken}")
                        .addHeader("Shippo-API-Version", "2017-03-29")
                        .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host("api.goshippo.com").port(443).path("shipments").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                    // based on code in Shippo Java client will return error message in plain text body
                    String errMsg = restResponse.text()
                    ec.logger.error("Shippo error response (${restResponse.statusCode}): ${errMsg}")
                    ec.message.addMessage("Shippo API error")
                    ec.message.addMessage(errMsg)
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script>

            <!-- <log level="warn" message="Shippo rate order ${orderId} response: ${responseMap}"/> -->

            <!-- show messages -->
            <if condition="responseMap.messages"><iterate list="responseMap.messages" entry="messageObj">
                <message>(${messageObj.source}:${messageObj.code}) ${messageObj.text}</message></iterate></if>

            <if condition="responseMap.status != 'SUCCESS'"><message>Shippo rate status ${responseMap.status} for package</message></if>
            
            <!-- find the rate matching the servicelevel_token -->
            <set field="shippingTotal" from="0.0"/>
            <set field="servicelevelMap" from="null"/>
            <iterate list="responseMap.rates" entry="rateMap">
                <if condition="rateMap?.servicelevel?.token == servicelevel_token">
                    <set field="shippingTotal" from="rateMap.amount as BigDecimal"/>
                    <set field="servicelevelMap" from="rateMap.servicelevel"/>
                    <break/>
                </if>
            </iterate>

            <!-- create an OrderItem for it if applicable -->
            <if condition="createOrderItem &amp;&amp; shippingTotal &gt; 0.0">
                <entity-find-one entity-name="mantle.party.Party" value-field="carrierParty">
                    <field-map field-name="partyId" from="carrierPartyId"/></entity-find-one>
                <entity-find-one entity-name="moqui.basic.Enumeration" value-field="shipmentMethodEnum">
                    <field-map field-name="enumId" from="orderPart.shipmentMethodEnumId"/></entity-find-one>
                <set field="itemDescription" value="${carrierParty.pseudoId} ${servicelevelMap.name ?: shipmentMethodEnum.description}"/>
                <set field="comments" value=""/>
                <iterate list="parcels" entry="parcel">
                    <if condition="comments"><set field="comments" from="comments + ', '"/></if>
                    <set field="comments" value="${comments}${parcel.length}x${parcel.width}x${parcel.height}${parcel.distance_unit} ${parcel.weight}${parcel.mass_unit}"/>
                </iterate>
                <service-call name="create#mantle.order.OrderItem" out-map="context" in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId,
                        itemTypeEnumId:'ItemShipping', quantity:1, unitAmount:shippingTotal, itemDescription:itemDescription, comments:comments]"/>
            </if>
        </actions>
    </service>
    <service verb="get" noun="ShippingRatesBulk">
        <implements service="mantle.shipment.CarrierServices.get#ShippingRatesBulk"/>
        <actions>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one>
            <set field="apiToken" from="apiTokenOpt?.optionValue"/>
            <if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not getting rates"/><return/></if>

            <if condition="!packageInfoList"><return message="No package info found, not getting Shippo shipping rates"/></if>
            <if condition="!carrierShipmentMethodList"><return message="No carrier/method list, not getting Shippo shipping rates"/></if>

            <!-- address_from -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                <field-map field-name="contactMechId" from="originPostalContactMechId"/></entity-find-one>
            <if condition="originPostalAddress.shipGatewayAddressId"><then>
                <set field="address_from" from="originPostalAddress.shipGatewayAddressId"/>
            </then><else>
                <service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="fromValidateOut"
                        in-map="[contactMechId:originPostalContactMechId, partyId:fromPartyId, facilityId:originFacilityId,
                            shippingGatewayConfigId:shippingGatewayConfigId]"/>
                <set field="originPostalContactMechId" from="fromValidateOut.contactMechId"/>

                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                    <field-map field-name="contactMechId" from="originPostalContactMechId"/></entity-find-one>
                <set field="address_from" from="originPostalAddress?.shipGatewayAddressId"/>
                <if condition="!address_from"><return message="Tried to validate and save origin address but got no ID back from Shippo"/></if>
            </else></if>

            <!-- address_to -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                <field-map field-name="contactMechId" from="destPostalContactMechId"/></entity-find-one>
            <if condition="destPostalAddress.shipGatewayAddressId"><then>
                <set field="address_to" from="destPostalAddress.shipGatewayAddressId"/>
            </then><else>
                <service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="toValidateOut"
                        in-map="[contactMechId:destPostalContactMechId, partyId:toPartyId, orderId:orderId, shipmentId:shipmentId,
                            shippingGatewayConfigId:shippingGatewayConfigId]"/>
                <set field="destPostalContactMechId" from="toValidateOut.contactMechId"/>

                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                    <field-map field-name="contactMechId" from="destPostalContactMechId"/></entity-find-one>
                <set field="address_to" from="destPostalAddress?.shipGatewayAddressId"/>
                <if condition="!address_to"><return message="Tried to validate and save destination address but got no ID back from Shippo"/></if>
            </else></if>

            <!-- carrier_accounts, servicelevel_token reverse Map -->
            <set field="carrier_accounts" from="[]"/>
            <set field="carrierPartyIdSet" from="new HashSet()"/>
            <set field="carrierMethodByServiceLevel" from="[:]"/>
            <iterate list="carrierShipmentMethodList" entry="carrierMethod">
                <if condition="!carrierPartyIdSet.contains(carrierMethod.carrierPartyId)">
                    <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayCarrier" value-field="gatewayCarrier" cache="true">
                        <field-map field-name="shippingGatewayConfigId"/><field-map field-name="carrierPartyId" from="carrierMethod.carrierPartyId"/></entity-find-one>
                    <if condition="gatewayCarrier?.gatewayAccountId"><then><script>carrier_accounts.add(gatewayCarrier.gatewayAccountId)</script></then>
                        <else><message>No gateway account ID found for carrier ${carrierMethod.carrierPartyId} in gateway ${shippingGatewayConfigId}</message></else></if>
                    <script>carrierPartyIdSet.add(carrierMethod.carrierPartyId)</script>
                </if>

                <entity-find-one entity-name="mantle.shipment.carrier.CarrierShipmentMethod" value-field="carrierMethodValue" cache="true">
                    <field-map field-name="carrierPartyId" from="carrierMethod.carrierPartyId"/>
                    <field-map field-name="shipmentMethodEnumId" from="carrierMethod.shipmentMethodEnumId"/>
                </entity-find-one>
                <if condition="carrierMethodValue?.gatewayServiceCode">
                    <then><script>carrierMethodByServiceLevel.put(carrierMethodValue.gatewayServiceCode, carrierMethodValue)</script></then>
                    <else><message>No Shippo service level code found for carrier ${carrierMethod.carrierPartyId} method ${carrierMethod.shipmentMethodEnumId}</message></else>
                </if>
            </iterate>

            <!-- parcels -->
            <set field="parcels" from="[]"/>
            <iterate list="packageInfoList" entry="packageInfo">
                <!-- parcel -->
                <entity-find-one entity-name="mantle.shipment.ShipmentBoxType" value-field="boxType">
                    <field-map field-name="shipmentBoxTypeId" from="packageInfo.shipmentBoxTypeId"/></entity-find-one>
                <if condition="boxType == null"><message>Package has no box type, skipping</message><continue/></if>

                <set field="dimUom" from="boxType.dimensionUom"/>
                <if condition="!boxType.boxLength || !boxType.boxWidth || !boxType.boxHeight || dimUom == null">
                    <message>Box type ${boxType.shipmentBoxTypeId} is missing dimensions (length, width, height) or dimension UOM, skipping package</message><continue/></if>
                <entity-find-one entity-name="moqui.basic.Uom" value-field="weightUom">
                    <field-map field-name="uomId" from="packageInfo.weightUomId ?: 'WT_lb'"/></entity-find-one>
                <set field="weight" from="packageInfo.weight ?: boxType.defaultGrossWeight"/>
                <if condition="!weight || weightUom == null">
                    <message>Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} is missing weight or weight UOM, skipping package</message><continue/></if>

                <set field="distance_unit" from="dimUom.abbreviation"/>
                <if condition="!(distance_unit in ['cm', 'in', 'ft', 'mm', 'm', 'yd'])">
                    <message>Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} dimension unit is '${distance_unit}', must be one of: 'cm', 'in', 'ft', 'mm', 'm', 'yd'; skipping package</message><continue/></if>
                <set field="mass_unit" from="weightUom.abbreviation"/>
                <if condition="!(mass_unit in ['g', 'oz', 'lb', 'kg'])">
                    <message>Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} weight unit is '${mass_unit}', must be one of: 'g', 'oz', 'lb', 'kg'; skipping package</message><continue/></if>

                <set field="parcel" from="[length:boxType.boxLength, width:boxType.boxWidth, height:boxType.boxHeight,
                            distance_unit:distance_unit, weight:weight, mass_unit:mass_unit, template:boxType.gatewayBoxId]"/>
                <script>parcels.add(parcel)</script>
            </iterate>
            <if condition="!parcels"><return/></if>

            <!-- assemble the full request Map -->
            <set field="requestMap" from="[address_from:address_from, address_to:address_to,
                    parcels:parcels, carrier_accounts:carrier_accounts, async:false]"/>
            <!-- NOTE: any way to pass servicelevel_token(s) to limit in advance? for now just filtering after -->

            <!-- <log level="warn" message="Shippo bulk rates request:\n${requestMap}"/> -->

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .addHeader("Authorization", "ShippoToken ${apiToken}")
                        .addHeader("Shippo-API-Version", "2017-03-29")
                        .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host("api.goshippo.com").port(443).path("shipments").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                    // based on code in Shippo Java client will return error message in plain text body
                    String errMsg = restResponse.text()
                    ec.logger.error("Shippo error response (${restResponse.statusCode}): ${errMsg}")
                    ec.message.addMessage("Shippo API error")
                    ec.message.addMessage(errMsg)
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script>

            <!-- <log level="warn" message="Shippo bulk rates response: ${responseMap}"/> -->

            <!-- show messages -->
            <if condition="responseMap.messages"><iterate list="responseMap.messages" entry="messageObj">
                <message>(${messageObj.source}:${messageObj.code}) ${messageObj.text}</message></iterate></if>

            <if condition="responseMap.status != 'SUCCESS'">
                <message>Shippo label status ${responseMap.status} for package</message></if>

            <!-- find the rates matching the servicelevel_token -->
            <set field="shippingRateInfoList" from="[]"/>
            <iterate list="responseMap.rates" entry="rateMap">
                <set field="carrierMethod" from="carrierMethodByServiceLevel.get(rateMap?.servicelevel?.token)"/>
                <if condition="carrierMethod != null">
                    <script>shippingRateInfoList.add([carrierPartyId:carrierMethod.carrierPartyId,
                            shipmentMethodEnumId:carrierMethod.shipmentMethodEnumId, shippingTotal:rateMap.amount,
                            currency:rateMap.currency, days:rateMap.days, durationTerms:rateMap.duration_terms,
                            serviceName:rateMap.servicelevel.name, carrierImageUrl:rateMap.provider_image_75])</script>
                </if>
            </iterate>
        </actions>
    </service>

    <!-- ============================================= -->
    <!-- ========== Shipping Label Services ========== -->
    <!-- ============================================= -->

    <service verb="get" noun="ShippingRate">
        <implements service="mantle.shipment.CarrierServices.get#ShippingRate"/>
        <actions>
            <!-- TODO FUTURE: get rate from Shippo and save ID, change request#ShippingLabels to do transaction based on rate if set -->
        </actions>
    </service>
    <service verb="request" noun="ShippingLabels">
        <implements service="mantle.shipment.CarrierServices.request#ShippingLabels"/>
        <actions>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one>
            <set field="apiToken" from="apiTokenOpt?.optionValue"/>
            <if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not requesting label"/><return/></if>

            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="labelTypeOpt">
                <field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoLabelType"/></entity-find-one>
            <set field="label_file_type" from="labelTypeOpt?.optionValue ?: 'PDF'"/>

            <!-- NOTE: lock on Shipment record -->
            <entity-find-one entity-name="mantle.shipment.Shipment" value-field="shipment" for-update="true"/>
            <if condition="shipment == null"><return error="true" message="Shipment not found with ID ${shipmentId}"/></if>
            <entity-find-one entity-name="mantle.shipment.ShipmentRouteSegment" value-field="routeSegment"/>
            <if condition="routeSegment == null"><return error="true" message="Shipment Route Segment not found with ID ${shipmentId}:${shipmentRouteSegmentSeqId}"/></if>

            <set field="fromPartyId" from="shipment.fromPartyId"/>
            <if condition="!fromPartyId"><message error="true">From party not set on shipment ${shipmentId}</message></if>
            <set field="toPartyId" from="shipment.toPartyId"/>
            <if condition="!toPartyId"><message error="true">To party not set on shipment ${shipmentId}</message></if>

            <set field="carrierPartyId" from="routeSegment.carrierPartyId"/>
            <if condition="!carrierPartyId || carrierPartyId == '_NA_'"><message error="true">Carrier not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}</message></if>
            <set field="shipmentMethodEnumId" from="routeSegment.shipmentMethodEnumId"/>
            <if condition="!shipmentMethodEnumId"><message error="true">Shipment method not set on shipment ${shipmentId}:${shipmentRouteSegmentSeqId}</message></if>

            <check-errors/>

            <!-- address_from -->
            <set field="originPostalContactMechId" from="routeSegment.originPostalContactMechId"/>
            <if condition="!originPostalContactMechId &amp;&amp; routeSegment.originFacilityId">
                <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipOrigin" out-map="facOriginOut"
                        in-map="[facilityId:routeSegment.originFacilityId]"/>
                <if condition="facOriginOut.postalContactMechId">
                    <set field="originPostalContactMechId" from="facOriginOut.postalContactMechId"/>
                    <set field="routeSegment.originPostalContactMechId" from="originPostalContactMechId"/>
                    <entity-update value-field="routeSegment"/>
                </if>
            </if>
            <if condition="originPostalContactMechId"><then>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                    <field-map field-name="contactMechId" from="originPostalContactMechId"/></entity-find-one>
                <if condition="originPostalAddress.shipGatewayAddressId"><then>
                    <set field="address_from" from="originPostalAddress.shipGatewayAddressId"/>
                </then><else>
                    <service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="fromValidateOut"
                            in-map="[contactMechId:originPostalContactMechId, partyId:fromPartyId, facilityId:routeSegment.originFacilityId,
                                shippingGatewayConfigId:shippingGatewayConfigId]"/>
                    <set field="originPostalContactMechId" from="fromValidateOut.contactMechId"/>
                    <set field="routeSegment.originPostalContactMechId" from="originPostalContactMechId"/>
                    <entity-update value-field="routeSegment"/>

                    <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                        <field-map field-name="contactMechId" from="originPostalContactMechId"/></entity-find-one>
                    <set field="address_from" from="originPostalAddress?.shipGatewayAddressId"/>
                    <if condition="!address_from"><message error="true">Tried to validate and save origin address but got no ID back from Shippo</message></if>
                </else></if>
            </then><else>
                <message error="true">No destination address set on Shipment Route Segment ${shipmentId}:${shipmentRouteSegmentSeqId}</message>
            </else></if>

            <!-- address_to -->
            <set field="destPostalContactMechId" from="routeSegment.destPostalContactMechId"/>
            <if condition="destPostalContactMechId"><then>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                    <field-map field-name="contactMechId" from="destPostalContactMechId"/></entity-find-one>
                <if condition="destPostalAddress.shipGatewayAddressId"><then>
                    <set field="address_to" from="destPostalAddress.shipGatewayAddressId"/>
                </then><else>
                    <service-call name="mantle.shippo.ShippoServices.validate#PostalAddress" out-map="toValidateOut"
                            in-map="[contactMechId:destPostalContactMechId, partyId:toPartyId, shippingGatewayConfigId:shippingGatewayConfigId]"/>
                    <set field="destPostalContactMechId" from="toValidateOut.contactMechId"/>
                    <set field="routeSegment.destPostalContactMechId" from="destPostalContactMechId"/>
                    <entity-update value-field="routeSegment"/>

                    <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                        <field-map field-name="contactMechId" from="destPostalContactMechId"/></entity-find-one>
                    <set field="address_to" from="destPostalAddress?.shipGatewayAddressId"/>
                    <if condition="!address_to"><message error="true">Tried to validate and save destination address but got no ID back from Shippo</message></if>
                </else></if>
            </then><else>
                <message error="true">No destination address set on Shipment Route Segment ${shipmentId}:${shipmentRouteSegmentSeqId}</message>
            </else></if>

            <!-- carrier_account, servicelevel_token -->
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayCarrier" value-field="gatewayCarrier"/>
            <set field="carrier_account" from="gatewayCarrier?.gatewayAccountId"/>
            <if condition="!carrier_account"><message error="true">No Shippo account ID found for carrier ${carrierPartyId} in gateway ${shippingGatewayConfigId}</message></if>
            <entity-find-one entity-name="mantle.shipment.carrier.CarrierShipmentMethod" value-field="carrierShipmentMethod"/>
            <set field="servicelevel_token" from="carrierShipmentMethod?.gatewayServiceCode"/>
            <if condition="!servicelevel_token"><message error="true">No Shippo service level code found for carrier ${carrierPartyId} method ${shipmentMethodEnumId}</message></if>

            <!-- check errors one last time before looping through packages -->
            <check-errors/>

            <!-- the rest is per package -->
            <!-- TODO: multi-parcel shipments for UPS and FedEx only up to 10 parcels, see https://goshippo.com/docs/multipiece -->
            <entity-find entity-name="mantle.shipment.ShipmentPackageRouteSeg" list="packageRouteSegList">
                <econdition field-name="shipmentId"/><econdition field-name="shipmentRouteSegmentSeqId"/>
                <econdition field-name="shipmentPackageSeqId" ignore-if-empty="true"/>
            </entity-find>
            <iterate list="packageRouteSegList" entry="packageRouteSeg">
                <set field="shipmentPackageSeqId" from="packageRouteSeg.shipmentPackageSeqId"/>
                <if condition="packageRouteSeg.gatewayLabelId"><message>Package ${shipmentPackageSeqId} in route segment ${shipmentRouteSegmentSeqId} already has Shippo label ${packageRouteSeg.gatewayLabelId}, skipping package</message><continue/></if>
                <entity-find-one entity-name="mantle.shipment.ShipmentPackage" value-field="shipmentPackage"/>

                <!-- parcel -->
                <set field="boxType" from="shipmentPackage.boxType"/>
                <if condition="boxType == null"><message>Package ${shipmentPackageSeqId} has no box type, skipping</message><continue/></if>

                <set field="dimUom" from="boxType.dimensionUom"/>
                <if condition="!boxType.boxLength || !boxType.boxWidth || !boxType.boxHeight || dimUom == null">
                    <message>Box type ${boxType.shipmentBoxTypeId} is missing dimensions (length, width, height) or dimension UOM, skipping package</message><continue/></if>
                <set field="weightUom" from="shipmentPackage.weightUom ?: boxType.weightUom"/>
                <set field="weight" from="shipmentPackage.weight ?: boxType.defaultGrossWeight"/>
                <if condition="!weight || weightUom == null">
                    <message>Package ${shipmentPackageSeqId} box type ${boxType.shipmentBoxTypeId} is missing weight or weight UOM, skipping package</message><continue/></if>

                <set field="distance_unit" from="dimUom.abbreviation"/>
                <if condition="!(distance_unit in ['cm', 'in', 'ft', 'mm', 'm', 'yd'])">
                    <message>Package ${shipmentPackageSeqId} box type ${boxType.shipmentBoxTypeId} dimension unit is '${distance_unit}', must be one of: 'cm', 'in', 'ft', 'mm', 'm', 'yd'; skipping package</message><continue/></if>
                <set field="mass_unit" from="weightUom.abbreviation"/>
                <if condition="!(mass_unit in ['g', 'oz', 'lb', 'kg'])">
                    <message>Package ${shipmentPackageSeqId} box type ${boxType.shipmentBoxTypeId} weight unit is '${mass_unit}', must be one of: 'g', 'oz', 'lb', 'kg'; skipping package</message><continue/></if>

                <set field="parcel" from="[length:boxType.boxLength, width:boxType.boxWidth, height:boxType.boxHeight,
                            distance_unit:distance_unit, weight:weight, mass_unit:mass_unit, template:boxType.gatewayBoxId]"/>

                <!-- assemble the full request Map -->
                <set field="requestMap" from="[
                    shipment:[object_purpose:'PURCHASE', address_from:address_from, address_to:address_to, parcels:[parcel], extra:[bypass_address_validation:true]],
                    carrier_account:carrier_account, servicelevel_token:servicelevel_token, label_file_type:label_file_type, async:false]"/>

                <!-- <log level="warn" message="Shippo transaction shipment ${shipmentId} request:\n${requestMap}"/> -->

                <script><![CDATA[
                    org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                            .addHeader("Authorization", "ShippoToken ${apiToken}")
                            .addHeader("Shippo-API-Version", "2017-03-29")
                            .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                    restClient.uri().protocol("https").host("api.goshippo.com").port(443).path("transactions").build()
                    org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        // based on code in Shippo Java client will return error message in plain text body
                        String errMsg = restResponse.text()
                        ec.logger.error("Shippo error package ${shipmentId}:${shipmentRouteSegmentSeqId}:${shipmentPackageSeqId} response (${restResponse.statusCode}): ${errMsg}")
                        ec.message.addMessage("Shippo API error for package ${shipmentPackageSeqId}")
                        ec.message.addMessage(errMsg)
                        if (errMsg.length() > 255) errMsg = errMsg.substring(0, 255)
                        packageRouteSeg.gatewayMessage = errMsg
                        packageRouteSeg.update()
                        continue
                    }
                    responseMap = restResponse.jsonObject()
                ]]></script>

                <!-- <log level="warn" message="Shippo transaction shipment ${shipmentId} response: ${responseMap}"/> -->

                <!-- show messages -->
                <set field="gatewayMessage" value=""/>
                <if condition="responseMap.messages">
                    <iterate list="responseMap.messages" entry="messageObj">
                        <message>(${messageObj.source}:${messageObj.code}) ${messageObj.text}</message>
                        <set field="gatewayMessage" value="${gatewayMessage}(${messageObj.source}:${messageObj.code}) ${messageObj.text} "/>
                    </iterate>
                    <if condition="gatewayMessage.length() &gt; 255"><set field="gatewayMessage" from="gatewayMessage.substring(0,255)"/></if>
                    <set field="packageRouteSeg.gatewayMessage" from="gatewayMessage"/>
                </if>
                <!-- always save results, whatever we got back -->
                <set field="packageRouteSeg.gatewayStatus" from="responseMap.status"/>
                <set field="packageRouteSeg.gatewayLabelId" from="responseMap.object_id"/>
                <set field="packageRouteSeg.gatewayRateId" from="responseMap.rate?.object_id"/>
                <set field="packageRouteSeg.estimatedAmount" from="responseMap.rate?.amount as BigDecimal"/>
                <set field="packageRouteSeg.trackingStatusEnumId" value="ShTsUnknown"/>
                <set field="packageRouteSeg.trackingCode" from="responseMap.tracking_number"/>
                <set field="packageRouteSeg.trackingUrl" from="responseMap.tracking_url_provider"/>
                <set field="packageRouteSeg.labelDate" from="ec.l10n.parseTimestamp(responseMap.object_created, 'yyyy-MM-dd\'T\'HH:mm:ss.SSSZ')"/>
                <set field="packageRouteSeg.labelUrl" from="responseMap.label_url"/>
                <entity-update value-field="packageRouteSeg"/>

                <if condition="responseMap.status != 'SUCCESS'">
                    <message>Shippo label status ${responseMap.status} for package ${shipmentPackageSeqId}</message></if>
            </iterate>
        </actions>
    </service>

    <service verb="refund" noun="ShippingLabels">
        <implements service="mantle.shipment.CarrierServices.refund#ShippingLabels"/>
        <actions>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one>
            <set field="apiToken" from="apiTokenOpt?.optionValue"/>
            <if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not voiding/refunding label"/><return/></if>

            <entity-find entity-name="mantle.shipment.ShipmentPackageRouteSeg" list="packageRouteSegList">
                <econdition field-name="shipmentId"/><econdition field-name="shipmentRouteSegmentSeqId"/>
                <econdition field-name="shipmentPackageSeqId" ignore-if-empty="true"/>
            </entity-find>
            <iterate list="packageRouteSegList" entry="packageRouteSeg">
                <if condition="!packageRouteSeg.gatewayLabelId"><message>Package ${shipmentPackageSeqId} in route segment ${shipmentRouteSegmentSeqId} has no Shippo label, skipping package</message><continue/></if>
                <if condition="packageRouteSeg.gatewayRefundId"><message>Package ${shipmentPackageSeqId} in route segment ${shipmentRouteSegmentSeqId} Shippo label ${packageRouteSeg.gatewayLabelId} already has refund ${packageRouteSeg.gatewayRefundId}, skipping package</message><continue/></if>

                <set field="requestMap" from="[transaction:packageRouteSeg.gatewayLabelId]"/>
                <!-- <log level="warn" message="Shippo refund shipment ${shipmentId} request:\n${requestMap}"/> -->

                <script><![CDATA[
                    org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                            .addHeader("Authorization", "ShippoToken ${apiToken}")
                            .addHeader("Shippo-API-Version", "2017-03-29")
                            .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                    restClient.uri().protocol("https").host("api.goshippo.com").port(443).path("refunds").build()
                    org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        // based on code in Shippo Java client will return error message in plain text body
                        String errMsg = restResponse.text()
                        ec.logger.error("Shippo error package ${shipmentId}:${shipmentRouteSegmentSeqId}:${shipmentPackageSeqId} response (${restResponse.statusCode}): ${errMsg}")
                        ec.message.addMessage("Shippo API error for package ${shipmentPackageSeqId}")
                        ec.message.addMessage(errMsg)
                        continue
                    }
                    responseMap = restResponse.jsonObject()
                ]]></script>

                <!-- <log level="warn" message="Shippo refund shipment ${shipmentId} response: ${responseMap}"/> -->

                <!-- show messages -->
                <if condition="responseMap.messages"><iterate list="responseMap.messages" entry="messageObj">
                    <message>(${messageObj.source}:${messageObj.code}) ${messageObj.text}</message></iterate></if>
                <!-- always save results, whatever we got back -->
                <set field="packageRouteSeg.gatewayRefundStatus" from="responseMap.status"/>
                <set field="packageRouteSeg.gatewayRefundId" from="responseMap.object_id"/>
                <entity-update value-field="packageRouteSeg"/>

                <if condition="responseMap.status != 'SUCCESS'">
                    <message>Shippo refund status ${responseMap.status} for package ${shipmentPackageSeqId}</message></if>
            </iterate>
        </actions>
    </service>
    <service verb="track" noun="ShippingLabels">
        <implements service="mantle.shipment.CarrierServices.track#ShippingLabels"/>
        <actions>
            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one>
            <set field="apiToken" from="apiTokenOpt?.optionValue"/>
            <if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not tracking shipment"/><return/></if>

            <entity-find entity-name="mantle.shipment.ShipmentPackageRouteSeg" list="packageRouteSegList">
                <econdition field-name="shipmentId"/><econdition field-name="shipmentRouteSegmentSeqId"/>
                <econdition field-name="shipmentPackageSeqId" ignore-if-empty="true"/>
            </entity-find>
            <iterate list="packageRouteSegList" entry="packageRouteSeg">
                <if condition="!packageRouteSeg.gatewayLabelId"><message>Package ${shipmentPackageSeqId} in route segment ${shipmentRouteSegmentSeqId} has no Shippo label, skipping package</message><continue/></if>

                <script><![CDATA[
                    org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.GET)
                            .addHeader("Authorization", "ShippoToken ${apiToken}")
                            .addHeader("Shippo-API-Version", "2017-03-29")
                            .addHeader("Content-Type", "application/json")
                    restClient.uri().protocol("https").host("api.goshippo.com").port(443).path("transactions").path((String) packageRouteSeg.gatewayLabelId).build()
                    org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                        // based on code in Shippo Java client will return error message in plain text body
                        String errMsg = restResponse.text()
                        ec.logger.error("Shippo error package ${shipmentId}:${shipmentRouteSegmentSeqId}:${shipmentPackageSeqId} response (${restResponse.statusCode}): ${errMsg}")
                        ec.message.addMessage("Shippo API error for package ${shipmentPackageSeqId}")
                        ec.message.addMessage(errMsg)
                        continue
                    }
                    responseMap = restResponse.jsonObject()
                ]]></script>

                <!-- <log level="warn" message="Shippo refund shipment ${shipmentId} response: ${responseMap}"/> -->

                <!-- show messages -->
                <if condition="responseMap.messages"><iterate list="responseMap.messages" entry="messageObj">
                    <message>(${messageObj.source}:${messageObj.code}) ${messageObj.text}</message></iterate></if>
                <!-- check the tracking_number, warn and update if needed -->
                <if condition="responseMap.tracking_number != packageRouteSeg.trackingCode">
                    <message>Tracking number from Shippo ${responseMap.tracking_number} did not match locally stored number ${packageRouteSeg.trackingCode}, updated local to match</message>
                    <set field="packageRouteSeg.trackingCode" from="responseMap.tracking_number"/>
                </if>
                <!-- always save results, whatever we got back -->
                <set field="packageRouteSeg.gatewayStatus" from="responseMap.status"/>
                <set field="statusMap" from="responseMap.tracking_status"/>
                <if condition="statusMap"><then>
                    <set field="packageRouteSeg.trackingStatusEnumId" from="[UNKNOWN:'ShTsUnknown', DELIVERED:'ShTsDelivered',
                        TRANSIT:'ShTsTransit', FAILURE:'ShTsFailure', RETURNED:'ShTsReturned'].get(statusMap.status)"/>
                    <set field="packageRouteSeg.trackingStatusDate" from="ec.l10n.parseTimestamp(statusMap.status_date, 'yyyy-MM-dd\'T\'HH:mm:ss.SSSZ')"/>

                    <message>Package ${shipmentPackageSeqId} tracking number ${responseMap.tracking_number} current status ${statusMap.status} on ${ec.l10n.format(packageRouteSeg.trackingStatusDate, null)}</message>
                </then><else>
                    <message>Package ${shipmentPackageSeqId} tracking number ${responseMap.tracking_number} current status unknown (not yet picked up by carrier)</message>
                </else></if>
                <entity-update value-field="packageRouteSeg"/>

                <iterate list="responseMap.tracking_history" entry="historyMap">
                    <set field="trackingStatusDate" from="ec.l10n.parseTimestamp(historyMap.status_date, 'yyyy-MM-dd\'T\'HH:mm:ss.SSSZ')"/>
                    <message>History: (${historyMap.status}) ${historyMap.status_details} on ${ec.l10n.format(trackingStatusDate, null)}</message>
                </iterate>
            </iterate>
        </actions>
    </service>

    <!-- ================================================= -->
    <!-- ========== Address Validation Services ========== -->
    <!-- ================================================= -->

    <service verb="validate" noun="PostalAddress">
        <implements service="mantle.shipment.CarrierServices.validate#ShippingPostalAddress"/>
        <actions>
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress"/>
            <if condition="postalAddress == null"><return/></if>

            <!-- if PostalAddress has no shipGatewayAddressId look for one based on it (by ContactMech.replacesContactMechId) and if found return that) -->
            <if condition="!postalAddress.shipGatewayAddressId">
                <if condition="partyId"><then>
                    <entity-find entity-name="mantle.party.contact.PartyContactMechInfo" list="replacesPcmiList">
                        <date-filter/><econdition field-name="partyId"/>
                        <econdition field-name="replacesContactMechId" from="contactMechId"/>
                        <select-field field-name="contactMechId"/><order-by field-name="contactMechId"/>
                    </entity-find>
                    <if condition="replacesPcmiList"><set field="contactMechId" from="replacesPcmiList[0].contactMechId"/>
                        <return/></if>
                </then><else-if condition="facilityId">
                    <entity-find entity-name="mantle.facility.FacilityContactMechInfo" list="replacesFcmiList">
                        <date-filter/><econdition field-name="facilityId"/>
                        <econdition field-name="replacesContactMechId" from="contactMechId"/>
                        <select-field field-name="contactMechId"/><order-by field-name="contactMechId"/>
                    </entity-find>
                    <if condition="replacesFcmiList"><set field="contactMechId" from="replacesFcmiList[0].contactMechId"/>
                        <return/></if>
                </else-if></if>
            </if>

            <entity-find-one entity-name="mantle.shipment.carrier.ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId"/><field-map field-name="optionEnumId" value="SgoApiToken"/></entity-find-one>
            <set field="apiToken" from="apiTokenOpt?.optionValue"/>
            <if condition="!apiToken"><log level="warn" message="Shipping gateway ${shippingGatewayConfigId} has no SgoApiToken, not validating address"/><return/></if>

            <service-call name="mantle.shippo.ShippoServices.get#AddressMap" out-map="addrOut"
                    in-map="[postalAddress:postalAddress, partyId:partyId]"/>
            <set field="addressMap" from="addrOut.addressMap"/>

            <set field="addressMap.validate" from="true"/>
            <set field="addressMap.async" from="false"/>

            <!-- <log level="warn" message="Shippo validate address ${contactMechId} request:\n${addressMap}"/> -->

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .addHeader("Authorization", "ShippoToken ${apiToken}")
                        .addHeader("Shippo-API-Version", "2017-03-29")
                        .addHeader("Content-Type", "application/json").jsonObject(addressMap)
                restClient.uri().protocol("https").host("api.goshippo.com").port(443).path("addresses").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                    // based on code in Shippo Java client will return error message in plain text body
                    String errMsg = restResponse.text()
                    ec.logger.error("Shippo error response (${restResponse.statusCode}): ${errMsg}")
                    ec.message.addError(errMsg)
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script>

            <!-- <log level="warn" message="Shippo validate address ${contactMechId} response: ${responseMap}"/> -->

            <set field="is_complete" from="responseMap.is_complete"/>
            <set field="is_valid" from="responseMap.validation_results ? responseMap.validation_results?.is_valid : true"/>
            <set field="trustLevelEnumId" from="(is_valid &amp;&amp; is_complete) ? 'CmtlValid' : (is_complete ? 'CmtlInvalid' : 'CmtlIncomplete')"/>

            <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="origContactMech"/>
            <set field="origContactMech.trustLevelEnumId" from="trustLevelEnumId"/>
            <entity-update value-field="origContactMech"/>

            <!-- call update#PartyPostalAddress for cleansed address -->
            <if condition="is_complete &amp;&amp; (partyId || facilityId)">
                <set field="stateProvinceGeoId" from="postalAddress.stateProvinceGeoId"/>
                <if condition="postalAddress.countryGeoId &amp;&amp; responseMap.state">
                    <entity-find entity-name="moqui.basic.GeoAssocAndToDetail" list="stateGeoList">
                        <econdition field-name="geoId" from="postalAddress.countryGeoId"/>
                        <econdition field-name="geoCodeAlpha2" from="responseMap.state"/>
                    </entity-find>
                    <if condition="stateGeoList"><set field="stateProvinceGeoId" from="stateGeoList[0].toGeoId"/></if>
                </if>
                <set field="paInMap" from="[contactMechId:contactMechId,
                        toName:(responseMap.company ? responseMap.company : responseMap.name), attnName:(responseMap.company ? responseMap.name : null),
                        address1:((responseMap.street_no ? responseMap.street_no + ' ' : '') + responseMap.street1),
                        address2:responseMap.street2, unitNumber:null, city:responseMap.city, stateProvinceGeoId:stateProvinceGeoId,
                        postalCode:(responseMap.zip.contains('-') ? responseMap.zip.substring(0, responseMap.zip.indexOf('-')) : responseMap.zip),
                        postalCodeExt:(responseMap.zip.contains('-') ? responseMap.zip.substring(responseMap.zip.indexOf('-') + 1) : ''),
                        commercial:(responseMap.is_residential != null &amp;&amp; !responseMap.is_residential ? 'Y' : 'N')]"/>
                <if condition="facilityId">
                    <entity-find entity-name="mantle.facility.FacilityContactMech" list="origFcmList">
                        <date-filter/>
                        <econdition field-name="facilityId"/>
                        <econdition field-name="contactMechId" from="contactMechId"/>
                    </entity-find>
                    <if condition="origFcmList">
                        <service-call name="mantle.facility.ContactServices.update#FacilityPostalAddress" out-map="paOut"
                                in-map="paInMap + [facilityId:facilityId, expireCurrent:false]"/>
                        <set field="contactMechId" from="paOut.contactMechId"/>
                        <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress"/>
                    </if>
                </if>
                <if condition="partyId">
                    <entity-find entity-name="mantle.party.contact.PartyContactMech" list="origPcmList">
                        <!-- NOTE: do without <date-filter/>, allow if address has ever been associated with Party -->
                        <econdition field-name="partyId"/><econdition field-name="contactMechId"/>
                    </entity-find>
                    <if condition="origPcmList">
                        <service-call name="mantle.party.ContactServices.update#PartyPostalAddress" out-map="paOut"
                                in-map="paInMap + [partyId:partyId, expireCurrent:false, contactMechPurposeId:'PostalShippingDest']"/>
                        <set field="contactMechId" from="paOut.contactMechId"/>
                        <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress"/>
                    </if>
                </if>
            </if>

            <log message="Shippo validate address ${contactMechId} complete? ${is_complete} valid? ${is_valid} trust ${trustLevelEnumId} commercial ${(responseMap.is_residential != null &amp;&amp; !responseMap.is_residential ? 'Y' : 'N')}"/>
            <!-- update contactMech (using latest contactMechId) -->
            <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="contactMech"/>
            <set field="contactMech.trustLevelEnumId" from="trustLevelEnumId"/>
            <if condition="responseMap.validation_results?.messages">
                <set field="validateMessage" value=""/>
                <iterate list="responseMap.validation_results.messages" entry="messageObj">
                    <!-- <log message="Shippo validate address ${contactMechId} complete? ${is_complete} valid? ${is_valid} trust ${trustLevelEnumId} message: ${messageObj}"/> -->
                    <set field="validateMessage" value="${validateMessage}(${messageObj.source}:${messageObj.code}) ${messageObj.text} "/>
                </iterate>
                <if condition="validateMessage.length() &gt; 255"><set field="validateMessage" from="validateMessage.substring(0,255)"/></if>
                <set field="contactMech.validateMessage" from="validateMessage"/>
            </if>
            <entity-update value-field="contactMech"/>

            <!-- update postalAddress -->
            <set field="postalAddress.shipGatewayAddressId" from="responseMap.object_id"/>
            <entity-update value-field="postalAddress"/>
        </actions>
    </service>

    <service verb="get" noun="AddressMap">
        <in-parameters>
            <parameter name="postalAddress" type="EntityValue" required="true"/>
            <parameter name="partyId"/>
            <parameter name="isOrigin" type="Boolean" default="false"/>
        </in-parameters>
        <out-parameters><parameter name="addressMap" type="Map"/></out-parameters>
        <actions>
            <set field="contactMechId" from="postalAddress.contactMechId"/>
            <if condition="!partyId">
                <!-- try to find from related Party -->
                <entity-find entity-name="mantle.party.contact.PartyContactMech" list="pcmList">
                    <econdition field-name="contactMechId"/><select-field field-name="partyId"/></entity-find>
                <set field="partyIds" from="new HashSet(pcmList*.partyId)"/>
                <!-- only if there is only one Party associated with the address -->
                <if condition="partyIds.size() == 1"><set field="partyId" from="pcmList[0].partyId"/></if>
            </if>

            <!-- name/company fields -->
            <if condition="postalAddress.attnName"><then>
                <set field="name" from="postalAddress.attnName"/>
                <set field="company" from="postalAddress.toName"/>
            </then><else>
                <set field="name" from="postalAddress.toName"/>
                <set field="company" from="null"/>
            </else></if>
            <if condition="!name &amp;&amp; partyId">
                <entity-find-one entity-name="mantle.party.PartyDetail" value-field="partyDetail"><field-map field-name="partyId"/></entity-find-one>
                <if condition="partyDetail != null">
                    <set field="name" value="${partyDetail.firstName ? partyDetail.firstName + ' ' : ''}${partyDetail.lastName?:''}${partyDetail.organizationName?:''}"/></if>
            </if>
            <if condition="!name"><return error="true" message="No name found for address ${contactMechId}"/></if>

            <!-- address fields -->
            <set field="street1" from="postalAddress.address1"/>
            <if condition="postalAddress.unitNumber"><set field="street1" from="street1 + ' #' + (String) postalAddress.unitNumber"/></if>
            <set field="stateProvinceGeo" from="postalAddress.stateProvinceGeo"/>
            <set field="countryGeo" from="postalAddress.countryGeo"/>

            <!-- phone number -->
            <if condition="postalAddress.telecomContactMechId">
                <entity-find-one entity-name="mantle.party.contact.TelecomNumber" value-field="telecomNumber">
                    <field-map field-name="contactMechId" from="postalAddress.telecomContactMechId"/></entity-find-one>
            </if>
            <if condition="telecomNumber == null &amp;&amp; partyId">
                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="telecomInfo"
                        in-map="[partyId:partyId, telecomContactMechPurposeId:(isOrigin ? 'PhoneShippingOrigin' : 'PhoneShippingDest')]"/>
                <if condition="telecomInfo.telecomNumber != null">
                    <set field="telecomNumber" from="telecomInfo.telecomNumber"/>
                    <set field="postalAddress.telecomContactMechId" from="telecomNumber.contactMechId"/>
                    <entity-update value-field="postalAddress"/>
                </if>
            </if>
            <if condition="telecomNumber != null">
                <set field="phone" value="${telecomNumber.countryCode? telecomNumber.countryCode + '-' :''}${telecomNumber.areaCode? telecomNumber.areaCode + '-' :''}${telecomNumber.contactNumber?:''}"/></if>

            <!-- email address -->
            <if condition="postalAddress.emailContactMechId">
                <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="emailCm">
                    <field-map field-name="contactMechId" from="postalAddress.emailContactMechId"/></entity-find-one>
                <set field="email" from="emailCm?.infoString"/>
            </if>
            <if condition="!email &amp;&amp; partyId">
                <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="emailInfo"
                        in-map="[partyId:partyId, emailContactMechPurposeId:(isOrigin ? 'EmailShippingOrigin' : 'EmailShippingDest')]"/>
                <if condition="emailInfo.emailAddress">
                    <set field="email" from="emailInfo.emailAddress"/>
                    <set field="postalAddress.emailContactMechId" from="emailInfo.emailContactMechId"/>
                    <entity-update value-field="postalAddress"/>
                </if>
            </if>

            <!-- make the Map -->
            <set field="addressMap" from="[object_purpose:'PURCHASE', name:name, company:company,
                street1:street1, street2:postalAddress.address2, city:postalAddress.city,
                state:stateProvinceGeo?.geoCodeAlpha2, country:countryGeo?.geoCodeAlpha2, zip:postalAddress.postalCode,
                phone:phone, email:email]"/>
        </actions>
    </service>
</services>
